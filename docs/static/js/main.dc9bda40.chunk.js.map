{"version":3,"sources":["components/Finder.js","images/logo-gif.svg","components/Header.js","components/GifCard.js","components/ListOfGifs.js","components/GifRecommendation.js","components/InitialIdeas.js","components/App.js","hooks/useLocalStorage.js","services/fetchGifs.js","reportWebVitals.js","index.js"],"names":["Finder","setGifKeyword","className","onChange","ev","keyword","target","value","type","placeholder","Header","href","src","logo","alt","GifCard","id","title","imgUrl","addFav","deleteFav","isFavourite","favourites","find","favourite","favClass","buttonText","heartIcon","onClick","preventDefault","gifId","ListOfGifs","gifs","setGifs","map","gif","url","GifRecommendation","name","htmlFor","InitialIdeas","idea","App","useState","key","initialValue","valueLocalStorage","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","setItem","stringify","console","useLocalStorage","setFavourites","setKeyword","useEffect","apiUrl","fetch","then","response","json","responseData","data","image","images","fixed_height","fetchGifs","length","index","indexOf","newFavs","splice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc9bda40.chunk.js","sourcesContent":["import \"../styles/Finder.scss\";\r\n\r\nexport default function Finder({ setGifKeyword }) {\r\n  function setGifsbyValue(ev) {\r\n    const keyword = ev.target.value;\r\n    setGifKeyword(keyword);\r\n  }\r\n\r\n  return (\r\n    <form className=\"finder\">\r\n      <input\r\n        className=\"finder__input\"\r\n        onChange={setGifsbyValue}\r\n        type=\"text\"\r\n        placeholder=\"Find your gif\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-gif.ec4442cb.svg\";","import Finder from \"./Finder\";\r\nimport logo from \"../images/logo-gif.svg\";\r\n\r\nimport \"../styles/Header.scss\";\r\n\r\nexport default function Header({ setGifKeyword }) {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__info\">\r\n        <a href=\"/\">\r\n          <img className=\"header__logo\" src={logo} alt=\"Finder Logo\"></img>\r\n        </a>\r\n        <h3 className=\"header__title\">\r\n          How do you <span>gif</span> today?\r\n        </h3>\r\n      </div>\r\n      <div className=\"header__finder\">\r\n        <Finder setGifKeyword={setGifKeyword} />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import \"../styles/GifCard.scss\";\r\n\r\nexport default function GifCard({\r\n  id,\r\n  title,\r\n  imgUrl,\r\n  addFav,\r\n  deleteFav,\r\n  favourites,\r\n}) {\r\n  const isFavourite = favourites.find((favourite) => favourite === id)\r\n    ? true\r\n    : false;\r\n\r\n  //Favs items.\r\n  const favClass = isFavourite ? \"card-container fav\" : \"card-container\";\r\n  const buttonText = isFavourite\r\n    ? \"Not favourite anymore?\"\r\n    : \"Am I your favourite?\";\r\n  const heartIcon = isFavourite ? \"üíî\" : \"‚ù§\";\r\n\r\n  function handleFav(ev) {\r\n    ev.preventDefault();\r\n    const gifId = ev.target.id;\r\n    if (!isFavourite) {\r\n      addFav(gifId);\r\n    } else {\r\n      deleteFav(gifId);\r\n    }\r\n  }\r\n  return (\r\n    <div className={favClass}>\r\n      <img className=\"card-container__img\" alt={title} src={imgUrl}></img>\r\n      <p className=\"card-container__title\">{title}</p>\r\n      <button id={id} className=\"card-container__button\" onClick={handleFav}>\r\n        {buttonText}\r\n        <span className=\"card-container__button--heart\"> {heartIcon} </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import GifCard from \"./GifCard\";\r\n\r\nimport \"../styles/ListOfGifs.scss\";\r\n\r\nexport default function ListOfGifs({\r\n  gifs,\r\n  setGifs,\r\n  addFav,\r\n  deleteFav,\r\n  favourites,\r\n}) {\r\n  function handleReset() {\r\n    gifs = [];\r\n    setGifs(gifs);\r\n  }\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      <button onClick={handleReset} className=\"button-close\">\r\n        Reset\r\n      </button>\r\n      <div className=\"list-container\">\r\n        {gifs.map((gif) => {\r\n          const { id, title, url } = gif;\r\n          return (\r\n            <GifCard\r\n              key={id}\r\n              imgUrl={url}\r\n              title={title}\r\n              id={id}\r\n              addFav={addFav}\r\n              deleteFav={deleteFav}\r\n              favourites={favourites}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function GifRecommendation({ setGifKeyword, name }) {\r\n  function setNewKeyword(ev) {\r\n    const keyword = ev.target.id;\r\n    setGifKeyword(keyword);\r\n  }\r\n\r\n  return (\r\n    <div className=\"recommendation\">\r\n      <input\r\n        onClick={setNewKeyword}\r\n        id={name}\r\n        type=\"radio\"\r\n        name=\"surprise-me\"\r\n      />\r\n      <label htmlFor={name}>{name + \" mood\"}</label>\r\n    </div>\r\n  );\r\n}\r\n","import GifRecommendation from \"./GifRecommendation\";\r\n\r\nimport \"../styles/InitialIdeas.scss\";\r\n\r\nexport default function InitialIdeas({ setGifKeyword }) {\r\n  const initialIdeasForUsers = [\"pandas\", \"cats\", \"dogs\"];\r\n  return (\r\n    <form>\r\n      <div className=\"initial-ideas__options\">\r\n        <p className=\"initial-ideas__options--text\">\r\n          No ideas?\r\n          <span>How about starting with these lovely animals?</span>\r\n        </p>\r\n        <div className=\"initial-ideas__options--recommendations\">\r\n          {initialIdeasForUsers.map((idea) => {\r\n            return (\r\n              <GifRecommendation\r\n                setGifKeyword={setGifKeyword}\r\n                key={idea}\r\n                name={idea}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\r\n\r\nimport Header from \"./Header\";\r\nimport fetchGifs from \"../services/fetchGifs\";\r\nimport ListOfGifs from \"./ListOfGifs\";\r\nimport InitialIdeas from \"./InitialIdeas\";\r\n\r\nimport \"../styles/App.scss\";\r\n\r\nfunction App() {\r\n  const [gifs, setGifs] = useState([]);\r\n  const [favourites, setFavourites] = useLocalStorage(\"favorites\", []);\r\n  const [keyword, setKeyword] = useState([\"\"]);\r\n\r\n  useEffect(() => {\r\n    if (keyword !== \"\") {\r\n      fetchGifs(keyword).then(setGifs);\r\n    }\r\n  }, [keyword]);\r\n\r\n  // Functions.\r\n  function addFav(gif) {\r\n    setFavourites([...favourites, gif]);\r\n  }\r\n\r\n  function deleteFav(gif) {\r\n    const index = favourites.indexOf(gif);\r\n    const newFavs = [...favourites];\r\n    newFavs.splice(index, 1);\r\n    setFavourites(newFavs);\r\n  }\r\n\r\n  function setGifKeyword(keyword) {\r\n    setKeyword(keyword);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app__container\">\r\n      <Header setGifKeyword={setGifKeyword} />\r\n\r\n      {gifs.length === 0 ? (\r\n        <div className=\"initial-ideas\">\r\n          <InitialIdeas setGifKeyword={setGifKeyword} />\r\n        </div>\r\n      ) : (\r\n        <ListOfGifs\r\n          gifs={gifs}\r\n          setGifs={setGifs}\r\n          addFav={addFav}\r\n          deleteFav={deleteFav}\r\n          favourites={favourites}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState } from \"react\";\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const valueLocalStorage = window.localStorage.getItem(key);\r\n\r\n      return valueLocalStorage ? JSON.parse(valueLocalStorage) : initialValue;\r\n    } catch (error) {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = (value) => {\r\n    try {\r\n      setStoredValue(value);\r\n      window.localStorage.setItem(key, JSON.stringify(value));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n","export default function fetchGifs(keyword) {\r\n  const apiKey = \"oHaXvTbitKxXjIh3JxwJLoNZ4tYRsXCb\";\r\n  const apiUrl = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${keyword}&limit=12&offset=0&rating=g&lang=en`;\r\n\r\n  return fetch(apiUrl)\r\n    .then((response) => response.json())\r\n    .then((responseData) => {\r\n      const { data } = responseData;\r\n      const gifs = data.map((image) => {\r\n        const { title, id, images } = image;\r\n        const { url } = images.fixed_height;\r\n\r\n        return { title, id, url };\r\n      });\r\n\r\n      return gifs;\r\n    });\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}